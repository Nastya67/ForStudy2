import postrgesql
import hashlib
def chek_subscribe(id1, id2):
    with postgresql.open("pq://postgres:poqwiueryt@localhost/CorseWork") as db:
        ins = db.prepare("SELECT * FROM friendlist WHERE  id1 = $1 and id2 = $2")
        para = ins(id1, id2)
        if para:
            return 1
        return 0

def new_post(id, lat, lng):
    with postgresql.open("pq://postgres:poqwiueryt@localhost/CorseWork") as db:
        ins = db.prepare("INSERT INTO posts (idpost, iduser, longitude, latitude, chocolate) "
        "VALUES ($1, $2, $3, $4, $5);")
        postid = id_generator(3, alfas)
        ins(postid, id, lng, lat, 0)

def del_follower(id1, id2):
    with postgresql.open("pq://postgres:poqwiueryt@localhost/CorseWork") as db:
        ins = db.prepare("DELETE FROM friendlist WHERE id1=$1 and id2=$2")
        ins(id1, id2)

def new_subscribe(id1, id2):
    if not chek_subscribe(id1, id2):
        with postgresql.open("pq://postgres:poqwiueryt@localhost/CorseWork") as db:
            ins = db.prepare("INSERT INTO friendlist VALUES ($1, $2)")
            ins(id1, id2)

def select_posts(id):
    with postgresql.open("pq://postgres:poqwiueryt@localhost/CorseWork") as db:
        sel = db.prepare("SELECT * FROM posts WHERE iduser = $1")
        posts = sel(id)
    if posts:
        return posts
    return []


def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))

def save_log(id, login, password):
     with postgresql.open("pq://postgres:poqwiueryt@localhost/CorseWork") as db:
         ins = db.prepare("INSERT INTO logpass VALUES ($1, $2, $3)")
         ins(id, hashlib.md5(password.encode('utf8')).hexdigest(), login.lower())

def get_list_follower(id):
    with postgresql.open("pq://postgres:poqwiueryt@localhost/CorseWork") as db:
        sel = db.prepare("SELECT (iduser, name, surname, userphoto) FROM"
        " friendlist INNER JOIN users on id1=iduser WHERE id2 = $1;")
        users = sel(id)
    if users:
        return users
    return []

def get_list_subscription(id):
    with postgresql.open("pq://postgres:poqwiueryt@localhost/CorseWork") as db:
        sel = db.prepare("SELECT (iduser, name, surname, userphoto) FROM"
        " friendlist INNER JOIN users on id2=iduser WHERE id1 = $1;")
        users = sel(id)
    if users:
        return users
    return []

def select_where_log(login):
    with postgresql.open("pq://postgres:poqwiueryt@localhost/CorseWork") as db:
        sel = db.prepare("SELECT * FROM logpass WHERE login = $1")
        users = sel(login.lower())
    if users:
        return users[0]
    return 0

def update_photo(id, foto):
    with postgresql.open("pq://postgres:poqwiueryt@localhost/CorseWork") as db:
        upd = db.prepare("UPDATE users SET userphoto=$1 WHERE iduser=$2")
        upd(foto, id)
    return 0

def get_user_info(id):
    with postgresql.open("pq://postgres:poqwiueryt@localhost/CorseWork") as db:
        sel = db.prepare("SELECT * FROM users WHERE iduser = $1")
        users = sel(id)
    if users:
        return users[0]
    return {}

def save_info(id, form):
    with postgresql.open("pq://postgres:poqwiueryt@localhost/CorseWork") as db:
        ins = db.prepare("INSERT INTO users (iduser, name, surname, bday, "
        "bmonth, byear, roles) VALUES ($1, $2, $3, $4, $5, $6, $7)")
        ins(id, form.name.data, form.surname.data, int(form.bday.data), int(form.bmonth.data),
        int(form.byear.data), 1)
